package com.jahanbabu.smarthome;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Vector;

import lifx.java.android.client.LFXClient;
import lifx.java.android.entities.LFXHSBKColor;
import lifx.java.android.entities.LFXTypes;
import lifx.java.android.light.LFXLight;
import lifx.java.android.light.LFXLightCollection;
import lifx.java.android.light.LFXTaggedLightCollection;
import lifx.java.android.network_context.LFXNetworkContext;

import com.jahanbabu.smarthome.Model.Room;
import com.jahanbabu.smarthome.db.DatabaseAdapter;
import com.jahanbabu.smarthome.db.DatabaseOpenHelper;
import com.thalmic.myo.AbstractDeviceListener;
import com.thalmic.myo.Arm;
import com.thalmic.myo.DeviceListener;
import com.thalmic.myo.Hub;
import com.thalmic.myo.Myo;
import com.thalmic.myo.Pose;
import com.thalmic.myo.Quaternion;
import com.thalmic.myo.XDirection;
import com.thalmic.myo.scanner.ScanActivity;

public class LifxDetailsActivity extends ActionBarActivity implements LFXLight.LFXLightListener, LFXLightCollection.LFXLightCollectionListener, LFXNetworkContext.LFXNetworkContextListener {
    Button editButton,button2,button3,button4;
    CompoundButton lightSwitch;
    Context context;
    ActionBar actionBar;
    LFXNetworkContext localNetworkContext;
    private WifiManager.MulticastLock ml = null;
    LFXLight light;
    ProgressDialog pd;
    SeekBar seekBar, colorSeekBar;

    private TextView mLockStateView;
    private TextView mTextView;
    private boolean fist = false, spread;
    boolean firstRoll = false, increasing = false;;
    private DatabaseAdapter dbAdapter;
    // Classes that inherit from AbstractDeviceListener can be used to receive events from Myo devices.
    // If you do not override an event, the default behavior is to do nothing.
    public DeviceListener mListener = new AbstractDeviceListener() {

        // onConnect() is called whenever a Myo has been connected.
        @Override
        public void onConnect(Myo myo, long timestamp) {
            // Set the text color of the text view to cyan when a Myo connects.
            mTextView.setTextColor(Color.CYAN);
        }

        // onDisconnect() is called whenever a Myo has been disconnected.
        @Override
        public void onDisconnect(Myo myo, long timestamp) {
            // Set the text color of the text view to red when a Myo disconnects.
            mTextView.setTextColor(Color.RED);
        }

        // onArmSync() is called whenever Myo has recognized a Sync Gesture after someone has put it on their
        // arm. This lets Myo know which arm it's on and which way it's facing.
        @Override
        public void onArmSync(Myo myo, long timestamp, Arm arm, XDirection xDirection) {
            mTextView.setText(myo.getArm() == Arm.LEFT ? R.string.arm_left : R.string.arm_right);
        }

        // onArmUnsync() is called whenever Myo has detected that it was moved from a stable position on a person's arm after
        // it recognized the arm. Typically this happens when someone takes Myo off of their arm, but it can also happen
        // when Myo is moved around on the arm.
        @Override
        public void onArmUnsync(Myo myo, long timestamp) {
            mTextView.setText(R.string.unsynced);
        }

        // onUnlock() is called whenever a synced Myo has been unlocked. Under the standard locking
        // policy, that means poses will now be delivered to the listener.
        @Override
        public void onUnlock(Myo myo, long timestamp) {
            mLockStateView.setText(R.string.unlocked);
        }

        // onLock() is called whenever a synced Myo has been locked. Under the standard locking
        // policy, that means poses will no longer be delivered to the listener.
        @Override
        public void onLock(Myo myo, long timestamp) {
            mLockStateView.setText(R.string.locked);
        }

        // onOrientationData() is called whenever a Myo provides its current orientation,
        // represented as a quaternion.
        @Override
        public void onOrientationData(Myo myo, long timestamp, Quaternion rotation) {
            // Calculate Euler angles (roll, pitch, and yaw) from the quaternion.
            float roll = (float) Math.toDegrees(Quaternion.roll(rotation));
            float pitch = (float) Math.toDegrees(Quaternion.pitch(rotation));
            float yaw = (float) Math.toDegrees(Quaternion.yaw(rotation));

            // Adjust roll and pitch for the orientation of the Myo on the arm.
            if (myo.getXDirection() == XDirection.TOWARD_ELBOW) {
                roll *= -1;
                pitch *= -1;
            }



            if (fist){
//                Log.i("ROLL", roll+"");
                if (!firstRoll){
                    AppConstant.roll =  (int) roll;
                    firstRoll=true;
                }
                increasing = false;
                if (firstRoll){
                    AppConstant.roll2 = (int) roll;
                    Log.i("ROLL -- ROLL2", AppConstant.roll+"<--->"+AppConstant.roll2);
                    if ((AppConstant.roll + 5) < AppConstant.roll2){
                        Log.i("ROLL", "INCREASING ---> "+roll+"");
                        AppConstant.roll = (int) roll;
                        increasing = true;
                        AppConstant.powerProgress+=5;
                        seekBar.setProgress(AppConstant.powerProgress);
                    }
                    if (!increasing){
                        if ((AppConstant.roll - 5) > AppConstant.roll2) {
                            Log.i("ROLL", "DECREASING ---> "+roll+"");
                            AppConstant.roll = (int) roll;
                            AppConstant.powerProgress-=5;
                            seekBar.setProgress(AppConstant.powerProgress);
                        }
                    }

                }
            }
//            Log.i("YAW", yaw+"");
//            Log.i("PITCH", pitch+"");
            // Next, we apply a rotation to the text view using the roll, pitch, and yaw.
            mTextView.setRotation(roll);
            mTextView.setRotationX(pitch);
            mTextView.setRotationY(yaw);
        }

        // onPose() is called whenever a Myo provides a new pose.
        @Override
        public void onPose(Myo myo, long timestamp, Pose pose) {
            // Handle the cases of the Pose enumeration, and change the text of the text view
            // based on the pose we receive.
            fist = false;
            switch (pose) {
                case UNKNOWN:
                    mTextView.setText(getString(R.string.app_name));
                    break;
                case REST:
                case DOUBLE_TAP:
                    int restTextId = R.string.app_name;

                    switch (myo.getArm()) {
                        case LEFT:
                            restTextId = R.string.arm_left;
                            break;
                        case RIGHT:
                            restTextId = R.string.arm_right;
                            break;
                    }
                    mTextView.setText(getString(restTextId));
                    break;
                case FIST:
                    fist = true;
                    mTextView.setText(getString(R.string.pose_fist));
//                    if( light.getPowerState() == LFXTypes.LFXPowerState.ON)
//                    {
//                        lightSwitch.setChecked(false);
//                    }
                    break;
                case WAVE_IN:
                    mTextView.setText(getString(R.string.pose_wavein));
                    if( light.getPowerState() == LFXTypes.LFXPowerState.ON)
                    {
//                        AppConstant.powerProgress+=10;
//                        seekBar.setProgress(AppConstant.powerProgress);
                        AppConstant.colorProgress+=10;
                        colorSeekBar.setProgress(AppConstant.colorProgress);
                    }
                    break;
                case WAVE_OUT:
                    mTextView.setText(getString(R.string.pose_waveout));
                    if( light.getPowerState() == LFXTypes.LFXPowerState.ON)
                    {
//                        AppConstant.powerProgress-=10;
//                        Log.i("powerProgress",""+AppConstant.powerProgress);
//                        seekBar.setProgress(AppConstant.powerProgress);
                        AppConstant.colorProgress-=10;
                        colorSeekBar.setProgress(AppConstant.colorProgress);
                    }
                    break;
                case FINGERS_SPREAD:
                    mTextView.setText(getString(R.string.pose_fingersspread));
//                    if (light != null){
                        if( light.getPowerState() == LFXTypes.LFXPowerState.OFF)
                        {
                            lightSwitch.setChecked(true);
                        } else {
                            lightSwitch.setChecked(false);
                        }
//                    }
                    break;
            }

            if (pose != Pose.UNKNOWN && pose != Pose.REST) {
                // Tell the Myo to stay unlocked until told otherwise. We do that here so you can
                // hold the poses without the Myo becoming locked.
                myo.unlock(Myo.UnlockType.HOLD);

                // Notify the Myo that the pose has resulted in an action, in this case changing
                // the text on the screen. The Myo will vibrate.
                myo.notifyUserAction();
            } else {
                // Tell the Myo to stay unlocked only for a short period. This allows the Myo to
                // stay unlocked while poses are being performed, but lock after inactivity.
                myo.unlock(Myo.UnlockType.TIMED);
            }
        }
    };
    private Vector<Room> rooms;

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // We don't want any callbacks when the Activity is gone, so unregister the listener.
        Hub.getInstance().removeListener(mListener);

        if (isFinishing()) {
            // The Activity is finishing, so shutdown the Hub. This will disconnect from the Myo.
            Hub.getInstance().shutdown();
        }
    }

    private void onScanActionSelected() {
        // Launch the ScanActivity to scan for Myos to connect to.
        Intent intent = new Intent(this, ScanActivity.class);
        startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_lifx_details);
        context = this;
        actionBar = getSupportActionBar();
        actionBar.setTitle(AppConstant.device);
        actionBar.setHomeButtonEnabled(true);
        actionBar.setDisplayHomeAsUpEnabled(true);

        dbAdapter = new DatabaseAdapter(context);

        WifiManager wifi;
        wifi = (WifiManager) getSystemService( Context.WIFI_SERVICE);
        ml = wifi.createMulticastLock( "lifx_samples_tag");
        ml.acquire();

        localNetworkContext = LFXClient.getSharedInstance(context).getLocalNetworkContext();
        localNetworkContext.connect();
        localNetworkContext.addNetworkContextListener( this);
//        pd = ProgressDialog.show(context, "", "Searching LIFx Devices.....", false,true);
//        localNetworkContext.getAllLightsCollection().addLightCollectionListener(this);


        if (AppConstant.cLifx != null)
            light = AppConstant.cLifx;
        else finish();

        lightSwitch = (CompoundButton)findViewById(R.id.lightSwitch);
        seekBar = (SeekBar)findViewById(R.id.seekBar);
//        editButton = (Button)findViewById(R.id.editButton);
        colorSeekBar = (SeekBar)findViewById(R.id.colorSeekBar);

        lightSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked){
                    Toast.makeText(context, "Light On", Toast.LENGTH_SHORT).show();
                    resetLight();
                    light.setPowerState( LFXTypes.LFXPowerState.ON);
                } else {
                    Toast.makeText(context, "Light Off", Toast.LENGTH_SHORT).show();
                    light.setPowerState( LFXTypes.LFXPowerState.OFF);
                }
            }
        });

        seekBar.setMax(100);
        seekBar.setProgress(50);
        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                AppConstant.powerProgress = progress;
                Toast.makeText(context, progress+"%", Toast.LENGTH_SHORT).show();
                Log.i("AppConstant.b Bri",""+AppConstant.b);
                AppConstant.b = (float) progress/100;
                Log.i("NOW Bri",""+AppConstant.b);
                LFXHSBKColor color = LFXHSBKColor.getColor( AppConstant.h, AppConstant.s, AppConstant.b, AppConstant.k);
                light.setColor( color);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });

        colorSeekBar.setMax(360);
        colorSeekBar.setProgress(0);
        colorSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
//                Toast.makeText(context, progress+"%", Toast.LENGTH_SHORT).show();
                AppConstant.colorProgress = progress;
                Log.i("AppConstant.h ",""+AppConstant.h);
                AppConstant.h = (float)progress;
                AppConstant.s = (float)progress;
                Log.i("NOW h",""+AppConstant.h);
                Log.i("NOW s",""+AppConstant.s);
                LFXHSBKColor color = LFXHSBKColor.getColor( AppConstant.h, AppConstant.s, AppConstant.b, AppConstant.k);
                light.setColor( color);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });

        mLockStateView = (TextView) findViewById(R.id.lock_state);
        mTextView = (TextView) findViewById(R.id.text);

        // First, we initialize the Hub singleton with an application identifier.
        Hub hub = Hub.getInstance();
        if (!hub.init(this, getPackageName())) {
            // We can't do anything with the Myo device if the Hub can't be initialized, so exit.
            Toast.makeText(this, "Couldn't initialize Hub", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }

        // Next, register for DeviceListener callbacks.
        hub.addListener(mListener);

    }

    private void resetLight() {
        seekBar.setProgress(50);
        colorSeekBar.setProgress(0);
        AppConstant.h = 0.001f;
        AppConstant.s = 0.01f;
        AppConstant.b = 0.5f;
        AppConstant.k = 3500;
        LFXHSBKColor color = LFXHSBKColor.getColor(AppConstant.h, AppConstant.s, AppConstant.b, AppConstant.k);
        light.setColor( color);
    }

    private void updateStateFromLIFX()

    {
        ArrayList<LFXLight> allLights = localNetworkContext.getAllLightsCollection().getLights();
        for( LFXLight aLight : allLights)
        {
            Log.i("DeviceID", aLight.getDeviceID());
            Toast.makeText(context, "LIFX DeviceID : " + aLight.getDeviceID(), Toast.LENGTH_LONG).show();
            light = aLight;
        }
        if( light.getPowerState() == LFXTypes.LFXPowerState.ON)
        {
            lightSwitch.setChecked(true);
        }
//        resetLight();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_device_details, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_edit) {
//            onScanActionSelected();
            showEditDialog();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void showEditDialog() {
        final Dialog dialog = new Dialog(context);
//                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
//                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.setContentView(R.layout.add_device_view);
//                LayoutInflater inflater = getLayoutInflater();
//                View view = inflater.inflate(R.layout.add_device_view, null);
//                builder.setView(view);

        TextView saveButton = (Button) dialog.findViewById(R.id.saveButton);
        TextView cancelButton = (Button) dialog.findViewById(R.id.cancelButton);
        TextView titleTextView = (TextView) dialog.findViewById(R.id.titleTextView);
        final EditText titleEditText = (EditText) dialog.findViewById(R.id.titleEditText);
        Spinner roomSpinner = (Spinner) dialog.findViewById(R.id.roomSpinner);
//                titleTextView.setText("Lifx bulb " + AppConstant.cLifx.getDeviceID());
        titleTextView.setVisibility(View.GONE);
        dialog.setTitle("Lifx bulb " + AppConstant.cLifx.getDeviceID());
//                titleEditText.setText(cPhoto.getDate());
        rooms = dbAdapter.getAllRoomsData();
        ArrayAdapter spinnerAdapter = new ArrayAdapter(context, android.R.layout.simple_spinner_item, rooms);
        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_list_item_1);
        roomSpinner.setAdapter(spinnerAdapter);
        roomSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

            @Override
            public void onItemSelected(AdapterView<?> arg0, View arg1, int pos, long arg3) {
                AppConstant.cRoomId = rooms.get(pos).getRoomId();
//                        Toast.makeText(context, rooms.get(pos).getRoomId(), Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> arg0) {
                // TODO Auto-generated method stub

            }
        });

        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String title = titleEditText.getText().toString();
                if (title.length() > 0){
                    if (dbAdapter.checkIfExist(DatabaseOpenHelper.TABLE_device, AppConstant.cLifx.getDeviceID())){
                        if (dbAdapter.updateDevice(AppConstant.cLifx.getDeviceID(), title, "lifx", "x", AppConstant.cRoomId) > 0){
                            Toast.makeText(context, "Device Updated Successfully", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(context, "opps! Error in Update", Toast.LENGTH_SHORT).show();
                        }
                    }else {
                        if (dbAdapter.addDevice(AppConstant.cLifx.getDeviceID(), title, "lifx", "x", AppConstant.cRoomId) > 0){
                            Toast.makeText(context, "Device Added Successfully", Toast.LENGTH_SHORT).show();
                            actionBar.setTitle(title);
                        } else {
                            Toast.makeText(context, "opps! Error in Add", Toast.LENGTH_SHORT).show();
                        }
                    }
                } else {
                    Toast.makeText(context, "Please add title to continue", Toast.LENGTH_SHORT).show();
                }
                dialog.dismiss();
            }
        });

        cancelButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
//                int p = 0;
//                for (int i = 0; i < folders.size(); i++) {
//                    if (folders.get(i).getId().equalsIgnoreCase(cPhoto.getId())) {
//                        p = i;
//                        break;
//                    }
//                }
//                folderSpinner.setSelection(p);
        // Add action buttons
//                            builder.setPositiveButton("Done",
//                                    new DialogInterface.OnClickListener() {
//                                        @Override
//                                        public void onClick(DialogInterface dialog, int id) {
//                                            dialog.dismiss();
//                                        }
//                                    }).setNegativeButton("Cancel",
//                                    new DialogInterface.OnClickListener() {
//                                        public void onClick(DialogInterface dialog, int id) {
//                                            dialog.dismiss();
//                                        }
//                                    });
        dialog.show();
    }

    @Override
    public void lightDidChangeLabel(LFXLight light, String label) {

    }

    @Override
    public void lightDidChangeColor(LFXLight light, LFXHSBKColor color) {

    }

    @Override
    public void lightDidChangePowerState(LFXLight light, LFXTypes.LFXPowerState powerState) {

    }

    @Override
    public void lightCollectionDidAddLight(LFXLightCollection lightCollection, LFXLight light) {
//        light.addLightListener( this);
    }

    @Override
    public void lightCollectionDidRemoveLight(LFXLightCollection lightCollection, LFXLight light) {
//        light.removeLightListener( this);
    }

    @Override
    public void lightCollectionDidChangeLabel(LFXLightCollection lightCollection, String label) {

    }

    @Override
    public void lightCollectionDidChangeColor(LFXLightCollection lightCollection, LFXHSBKColor color) {

    }

    @Override
    public void lightCollectionDidChangeFuzzyPowerState(LFXLightCollection lightCollection, LFXTypes.LFXFuzzyPowerState fuzzyPowerState) {

    }

    @Override
    public void networkContextDidConnect(LFXNetworkContext networkContext) {
//        pd.dismiss();
//        updateStateFromLIFX();
    }

    @Override
    public void networkContextDidDisconnect(LFXNetworkContext networkContext) {

    }

    @Override
    public void networkContextDidAddTaggedLightCollection(LFXNetworkContext networkContext, LFXTaggedLightCollection collection) {

    }

    @Override
    public void networkContextDidRemoveTaggedLightCollection(LFXNetworkContext networkContext, LFXTaggedLightCollection collection) {

    }
}
